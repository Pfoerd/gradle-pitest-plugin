plugins {
    id 'com.bmuschko.nexus' version '2.3.1'
    id 'com.github.ben-manes.versions' version '0.25.0'
    id 'groovy'
    id 'maven-publish'
    id 'signing'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.10.0'
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    google()
    jcenter()
}

sourceSets {
    funcTest {
        java.srcDir file('src/funcTest/java')
        groovy.srcDir file('src/funcTest/groovy')
        resources.srcDir file('src/funcTest/resources')
    }
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation 'com.android.tools.build:gradle:3.6.1'

    testImplementation('org.spockframework:spock-core:2.0-M2-groovy-2.5') {
        exclude group: 'org.codehaus.groovy'
    }
    //for "@Rule TemporaryFolder"
    testImplementation('org.spockframework:spock-junit4:2.0-M2-groovy-2.5') {
        exclude group: 'org.codehaus.groovy'
    }
    testImplementation 'info.solidsoft.spock:spock-global-unroll:0.5.1'
    testImplementation 'net.bytebuddy:byte-buddy:1.10.8' //for Spying in Spock

    funcTestImplementation sourceSets.main.output
    //to make production plugin classes visible in functional tests (it's not in testImplementation configuration)
    funcTestImplementation configurations.testImplementation
    funcTestRuntimeOnly configurations.testRuntimeOnly
    funcTestImplementation('com.netflix.nebula:nebula-test:7.8.5') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

tasks.validateTaskProperties {
    enableStricterValidation = true
    failOnWarning = true
}

task funcTest(type: Test) {
    description = 'Run the functional tests.'
    group = 'Verification'
    testClassesDirs = sourceSets.funcTest.output.classesDirs
    classpath = sourceSets.funcTest.runtimeClasspath
    jvmArgs '-Xmx1g'
    systemProperty('ignoreDeprecations', 'true') //TODO remove after AGP stops using deprecated API
}

funcTest.shouldRunAfter test
check.shouldRunAfter funcTest
check.dependsOn funcTestClasses     //or more generically: tasks.withType(AbstractCompile)
uploadArchives.dependsOn funcTest, check
publishPlugins.dependsOn funcTest, check

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    reportOn test, funcTest
}

tasks.withType(Test).configureEach { testTask ->
    testTask.configure {
        useJUnitPlatform()

        testLogging {
            exceptionFormat = 'full'
        }

        afterSuite { desc, result ->
            if (!desc.parent) {
                if (result.testCount == 0) {
                    throw new IllegalStateException("No tests were found. Failing the build")
                }
            }
        }
    }
}

modifyPom {
    project {
        name POM_NAME
        description POM_DESCRIPTION
        url POM_URL

        scm {
            connection POM_SCM_CONNECTION_URL
            developerConnection POM_SCM_CONNECTION_URL
            url POM_URL
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'szpak'
                name 'Marcin Zajączkowski'
                email 'mszpak ATT wp DOTT pl'
                roles {
                    role 'despot'
                    role 'developer'
                }
            }
            developer {
                id 'koral'
                name 'Karol Wrótniak'
                email 'karol.wrotniak@droidsonroids.pl'
                roles {
                    role 'developer'
                }
            }
        }
    }
}

pluginBundle {
    website = POM_URL
    vcsUrl = POM_URL
    tags = ['pitest', 'android', 'mutation testing']
    description = POM_DESCRIPTION
    version = VERSION
    group = GROUP

    plugins {
        pitest {
            id = 'pl.droidsonroids.pitest'
            displayName = POM_NAME
        }
    }
}

publishing {
    repositories {
        mavenLocal()
    }
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

gradlePlugin {
    testSourceSets sourceSets.funcTest
    plugins {
        pitest {
            id = 'pl.droidsonroids.pitest'
            implementationClass = 'pl.droidsonroids.gradle.pitest.PitestPlugin'
        }
    }
}
